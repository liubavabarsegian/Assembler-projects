     1                                  ; %include "lib64.asm"
     2                                  ;Вводится строка, содержащая несколько слов, 
     3                                  ;разделенных пробелом.определить слова короче 4-х символов, 
     4                                  ;содержащие цифры, и количество таких слов.
     5                                  section .data
     6                                  section .bss
     7 00000000 <res FFh>                   string resb 255
     8                                  section .text
     9                                  global _start
    10                                  _start:
    11                                      input_str:
    12 00000000 B800000000                      mov eax, 0; read
    13 00000005 BF00000000                      mov edi, 0; stdin=0
    14 0000000A BE[00000000]                    mov esi, string; адрес вводимой строки
    15 0000000F BAFF000000                      mov edx, 255; buf len
    16 00000014 0F05                            syscall
    17                                      main:
    18 00000016 BF[00000000]                    mov edi, string
    19 0000001B B00A                            mov al, 10
    20 0000001D B9FF000000                      mov ecx, 255
    21 00000022 F2AE                            repne scasb
    22 00000024 67C647FF20                      mov byte[edi-1], 32
    23 00000029 67C6070A                        mov byte[edi], 10
    24                                  
    25 0000002D B9FF000000                      mov ecx, 255
    26 00000032 BB00000000                      mov ebx, 0 ;for counting current index
    27 00000037 BD00000000                      mov ebp, 0
    28                                          read_by_byte:
    29 0000003C 678BBB[00000000]                    mov edi, [string + ebx]
    30 00000043 AC                                  lodsb
    31 00000044 83F80A                              cmp eax, 10
    32 00000047 747B                                    je exit
    33 00000049 83F820                              cmp eax, 32
    34 0000004C 7406                                    je check_size
    35 0000004E FFC3                                inc ebx
    36 00000050 FFC5                                inc ebp
    37 00000052 E2E8                                loop read_by_byte
    38                                          check_size:
    39 00000054 83FD04                              cmp ebp, 4
    40 00000057 7D4B                                    jge go_to_next_word
    41 00000059 7C00                                    jl check_for_digits
    42                                          check_for_digits:
    43 0000005B 89E9                                    mov ecx, ebp
    44 0000005D 89D8                                    mov eax, ebx
    45 0000005F 29E8                                    sub eax, ebp
    46 00000061 67488DB0[00000000]                      lea rsi, [string + eax]
    47                                                  word_loop:
    48 00000069 83F900                                      cmp ecx, 0
    49 0000006C 7436                                            je go_to_next_word
    50 0000006E BC00000000                                  mov esp, 0 ;for countring ifs
    51 00000073 AC                                          lodsb
    52 00000074 83F830                                      cmp eax, 48
    53 00000077 7D0E                                            jge inc_esp1
    54                                                      cmp2:
    55 00000079 83F839                                      cmp eax, 57
    56 0000007C 7E0D                                            jle inc_esp2
    57                                                      after_cmp:
    58 0000007E 83FC02                                      cmp esp, 2
    59 00000081 740C                                            je print_current_word
    60 00000083 FFC9                                        dec ecx
    61 00000085 EBE2                                        jmp word_loop
    62                                          inc_esp1:
    63 00000087 FFC4                                inc esp
    64 00000089 EBEE                                jmp cmp2
    65                                          inc_esp2:
    66 0000008B FFC4                                inc esp
    67 0000008D EBEF                                jmp after_cmp
    68                                          print_current_word:
    69 0000008F 89EA                                mov edx, ebp ; длина строки
    70 00000091 B801000000                          mov eax, 1;write
    71 00000096 BF01000000                          mov edi, 1;stdout=1
    72 0000009B BE[00000000]                        mov esi, string
    73 000000A0 0F05                                syscall 
    74 000000A2 EB00                                jmp go_to_next_word
    75                                          go_to_next_word:
    76 000000A4 83C301                              add ebx, 1
    77 000000A7 BD00000000                          mov ebp, 0 ;for countring number of letters in a word
    78 000000AC EB8E                                jmp read_by_byte
    79                                      output_str:
    80 000000AE BAFF000000                      mov edx, 255 ; длина строки
    81 000000B3 B801000000                      mov eax, 1;write
    82 000000B8 BF01000000                      mov edi, 1;stdout=1
    83 000000BD BE[00000000]                    mov esi, string 
    84 000000C2 0F05                            syscall 
    85                                  exit:
    86 000000C4 B83C000000                  mov rax, 60;
    87 000000C9 4831FF                      xor rdi, rdi; return code 0
    88 000000CC 0F05                        syscall
    89                                  
