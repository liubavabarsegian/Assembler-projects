     1                                  %include "lib64.asm"
     2                              <1>          section .text     ; сегмент кода
     3                              <1> IntToStr64: 
     4 00000000 57                  <1>          push   rdi
     5 00000001 53                  <1>          push   rbx
     6 00000002 52                  <1>          push   rdx
     7 00000003 51                  <1>          push   rcx
     8 00000004 56                  <1> 		 push   rsi
     9 00000005 C60600              <1> 		 mov    byte[rsi],0 ; на место знака
    10 00000008 83F800              <1>          cmp    eax,0
    11 0000000B 7D05                <1>          jge    .l1
    12 0000000D F7D8                <1>          neg    eax
    13 0000000F C6062D              <1>          mov    byte[rsi],'-'
    14 00000012 C646060A            <1> .l1      mov    byte[rsi+6],10
    15 00000016 BF05000000          <1>          mov    rdi,5
    16 0000001B 66BB0A00            <1>          mov    bx,10
    17 0000001F 6699                <1> .again:  cwd           ; расширили слово до двойного
    18 00000021 66F7F3              <1>          div    bx     ; делим результат на 10
    19 00000024 80C230              <1>          add    dl,30h ; получаем из остатка код цифры
    20 00000027 88143E              <1>          mov    [rsi+rdi],dl ; пишем символ в строку
    21 0000002A 48FFCF              <1>          dec    rdi    ; переводим указатель на  
    22                              <1>                        ; предыдущую позицию
    23 0000002D 6683F800            <1>          cmp    ax, 0  ; преобразовали все число?
    24 00000031 75EC                <1>          jne    .again
    25 00000033 B906000000          <1>          mov    rcx, 6
    26 00000038 4829F9              <1>          sub    rcx, rdi ; длина результата+знак
    27 0000003B 4889C8              <1> 		 mov    rax,rcx
    28 0000003E 48FFC0              <1> 		 inc    rax    ; длина результата+OA
    29 00000041 48FFC6              <1>          inc    rsi    ; пропускаем знак
    30 00000044 56                  <1> 		 push   rsi
    31 00000045 488D343E            <1>          lea    rsi,[rsi+rdi] ; начало результата
    32 00000049 5F                  <1> 		 pop    rdi
    33 0000004A F3A4                <1>          rep movsb
    34 0000004C 5E                  <1>          pop    rsi  
    35 0000004D 59                  <1>          pop    rcx
    36 0000004E 5A                  <1>          pop    rdx
    37 0000004F 5B                  <1>          pop    rbx
    38 00000050 5F                  <1>          pop    rdi
    39 00000051 C3                  <1>          ret
    40                              <1> StrToInt64:
    41 00000052 57                  <1>          push   rdi
    42 00000053 B739                <1>          mov    bh, '9'
    43 00000055 B330                <1>          mov    bl, '0'
    44 00000057 56                  <1>          push   rsi     ; сохраняем адрес исходной строки
    45 00000058 803E2D              <1>          cmp    byte[rsi], '-'
    46 0000005B 7503                <1>          jne    .prod
    47 0000005D 48FFC6              <1>          inc    rsi     ; пропускаем знак
    48 00000060 FC                  <1> .prod    cld
    49 00000061 6631FF              <1>          xor    di, di  ; обнуляем будущее число
    50 00000064 AC                  <1> .cycle:  lodsb          ; загружаем символ (цифру)
    51 00000065 3C0A                <1>          cmp    al, 10  ; если 10, то на конец
    52 00000067 741F                <1>          je     .Return
    53 00000069 38D8                <1>          cmp    al, bl  ; сравниваем с кодом нуля
    54 0000006B 722F                <1>          jb     .Error  ; "ниже" – Ошибка
    55 0000006D 38F8                <1>          cmp    al, bh  ; сравниваем с кодом девяти 
    56 0000006F 772B                <1>          ja     .Error  ; "выше" – Ошибка
    57 00000071 2C30                <1>          sub    al, 30h ; получаем цифру из символа
    58 00000073 6698                <1>          cbw            ; расширяем до слова
    59 00000075 6650                <1>          push   ax      ; сохраняем в стеке
    60 00000077 66B80A00            <1>          mov    ax, 10  ; заносим 10 в AX
    61 0000007B 66F7E7              <1>          mul    di      ; умножаем, результат в DX:AX
    62 0000007E 665F                <1>          pop    di      ; в DI – очередная цифра
    63 00000080 6601F8              <1>          add    ax, di
    64 00000083 6689C7              <1>          mov    di, ax  ; в DI – накопленное число        
    65 00000086 EBDC                <1>          jmp    .cycle
    66 00000088 5E                  <1> .Return: pop    rsi
    67 00000089 BB00000000          <1>          mov    rbx, 0
    68 0000008E 803E2D              <1>          cmp    byte[rsi], '-'
    69 00000091 7503                <1>          jne    .J
    70 00000093 66F7DF              <1>          neg    di
    71 00000096 6689F8              <1> .J       mov    ax, di
    72 00000099 98                  <1>          cwde
    73 0000009A EB0B                <1>          jmp    .R
    74 0000009C 5E                  <1> .Error:  pop    rsi
    75 0000009D B800000000          <1>          mov    rax, 0
    76 000000A2 BB01000000          <1>          mov    rbx, 1
    77 000000A7 5F                  <1> .R       pop    rdi
    78 000000A8 C3                  <1>          ret
     2                                  
     3                                  section .data
     4 00000000 010000000200000003-         B dd    1, 2, 3, 4, 5, 6,             7, 8, 9, 10, 11, 12,             13, 14, 15, 16, 17, 18,             19, 20, 21, 22, 23, 24,             25, 26, 27, 28, 29, 30
     4 00000009 000000040000000500-
     4 00000012 000006000000070000-
     4 0000001B 000800000009000000-
     4 00000024 0A0000000B0000000C-
     4 0000002D 0000000D0000000E00-
     4 00000036 00000F000000100000-
     4 0000003F 001100000012000000-
     4 00000048 130000001400000015-
     4 00000051 000000160000001700-
     4 0000005A 000018000000190000-
     4 00000063 001A0000001B000000-
     4 0000006C 1C0000001D0000001E-
     4 00000075 000000             
     9                                  section .bss
    10 00000000 ????????                    Buf resd 1
    11                                  section .text
    12                                  
    13                                  global _start
    14                                  _start:
    15 000000A9 B905000000                  mov ecx, 5 ;РєРѕР»РёС‡РµСЃС‚РІРѕ СЃС‚СЂРѕРє
    16 000000AE BB00000000                  mov ebx, 0 ;РґР»СЏ СЃС‚СЂРѕРє
    17                                      cycle1:
    18 000000B3 51                              push rcx;
    19 000000B4 B903000000                      mov ecx, 3
    20 000000B9 BA00000000                      mov edx, 0 ;РґР»СЏ СЃС‚РѕР»Р±С†РѕРІ
    21                                          cycle2:
    22 000000BE 51                                  push rcx
    23 000000BF 52                                  push rdx
    24 000000C0 89D8                                mov eax, ebx
    25 000000C2 BF06000000                          mov edi, 6
    26 000000C7 F7E7                                mul edi
    27 000000C9 BF04000000                          mov edi, 4
    28 000000CE F7E7                                mul edi
    29 000000D0 89C7                                mov edi, eax
    30                                  
    31 000000D2 5A                                  pop rdx
    32 000000D3 57                                  push rdi
    33 000000D4 89D0                                mov eax, edx
    34 000000D6 52                                  push rdx
    35 000000D7 BF04000000                          mov edi, 4
    36 000000DC F7E7                                mul edi
    37 000000DE 5A                                  pop rdx
    38 000000DF 5F                                  pop rdi
    39 000000E0 01C7                                add edi, eax
    40                                  
    41 000000E2 52                                  push rdx
    42 000000E3 678B87[00000000]                    mov eax, [B + edi]
    43 000000EA 678B97[04000000]                    mov  edx, [B + edi + 4]
    44 000000F1 678997[00000000]                    mov [B + edi], edx
    45 000000F8 678987[04000000]                    mov [B + edi + 4], eax
    46 000000FF 5A                                  pop rdx
    47                                  
    48 00000100 59                                  pop rcx
    49 00000101 83C202                              add edx, 2  
    50 00000104 E2B8                                loop cycle2
    51 00000106 59                              pop rcx
    52 00000107 FFC3                            inc ebx
    53 00000109 E2A8                            loop cycle1
    54                                  
    55                                  
    56 0000010B B905000000                  mov ecx, 5 ;РєРѕР»РёС‡РµСЃС‚РІРѕ СЃС‚СЂРѕРє
    57 00000110 BB00000000                  mov ebx, 0 ;РґР»СЏ СЃС‚СЂРѕРє
    58                                      print_cycle1:
    59 00000115 51                              push rcx;
    60 00000116 B906000000                      mov ecx, 6
    61 0000011B BA00000000                      mov edx, 0 ;РґР»СЏ СЃС‚РѕР»Р±С†РѕРІ
    62                                          print_cycle2:
    63 00000120 51                                  push rcx
    64 00000121 BE[00000000]                        mov esi, Buf
    65                                  
    66 00000126 56                                  push rsi
    67 00000127 52                                  push rdx
    68 00000128 89D8                                mov eax, ebx
    69 0000012A BF06000000                          mov edi, 6
    70 0000012F F7E7                                mul edi
    71 00000131 BF04000000                          mov edi, 4
    72 00000136 F7E7                                mul edi
    73 00000138 89C7                                mov edi, eax
    74                                  
    75 0000013A 5A                                  pop rdx
    76 0000013B 57                                  push rdi
    77 0000013C 89D0                                mov eax, edx
    78 0000013E 52                                  push rdx
    79 0000013F BF04000000                          mov edi, 4
    80 00000144 F7E7                                mul edi
    81 00000146 5A                                  pop rdx
    82 00000147 5F                                  pop rdi
    83 00000148 01C7                                add edi, eax
    84 0000014A 5E                                  pop rsi
    85                                  
    86 0000014B 678B87[00000000]                    mov eax, [B + edi]
    87 00000152 E8A9FEFFFF                          call IntToStr64
    88                                              
    89 00000157 52                                  push rdx
    90 00000158 89C2                                mov edx, eax ; РґР»РёРЅР° СЃС‚СЂРѕРєРё
    91 0000015A B801000000                          mov eax, 1;write
    92 0000015F BF01000000                          mov edi, 1;stdout=1
    93 00000164 BE[00000000]                        mov esi, Buf 
    94 00000169 0F05                                syscall 
    95                                  
    96 0000016B 5A                                  pop rdx
    97 0000016C 59                                  pop rcx
    98 0000016D FFC2                                inc edx
    99 0000016F E2AF                                loop print_cycle2
   100 00000171 59                              pop rcx
   101 00000172 FFC3                            inc ebx
   102 00000174 E29F                            loop print_cycle1
   103                                  exit:
   104 00000176 B83C000000                  mov rax, 60;
   105 0000017B 4831FF                      xor rdi, rdi; return code 0
   106 0000017E 0F05                        syscall
   107                                  
