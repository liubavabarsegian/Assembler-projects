     1                                  %include "lib64.asm"
     2                              <1>          section .text     ; сегмент кода
     3                              <1> IntToStr64: 
     4 00000000 57                  <1>          push   rdi
     5 00000001 53                  <1>          push   rbx
     6 00000002 52                  <1>          push   rdx
     7 00000003 51                  <1>          push   rcx
     8 00000004 56                  <1> 		 push   rsi
     9 00000005 C60600              <1> 		 mov    byte[rsi],0 ; на место знака
    10 00000008 83F800              <1>          cmp    eax,0
    11 0000000B 7D05                <1>          jge    .l1
    12 0000000D F7D8                <1>          neg    eax
    13 0000000F C6062D              <1>          mov    byte[rsi],'-'
    14 00000012 C646060A            <1> .l1      mov    byte[rsi+6],10
    15 00000016 BF05000000          <1>          mov    rdi,5
    16 0000001B 66BB0A00            <1>          mov    bx,10
    17 0000001F 6699                <1> .again:  cwd           ; расширили слово до двойного
    18 00000021 66F7F3              <1>          div    bx     ; делим результат на 10
    19 00000024 80C230              <1>          add    dl,30h ; получаем из остатка код цифры
    20 00000027 88143E              <1>          mov    [rsi+rdi],dl ; пишем символ в строку
    21 0000002A 48FFCF              <1>          dec    rdi    ; переводим указатель на  
    22                              <1>                        ; предыдущую позицию
    23 0000002D 6683F800            <1>          cmp    ax, 0  ; преобразовали все число?
    24 00000031 75EC                <1>          jne    .again
    25 00000033 B906000000          <1>          mov    rcx, 6
    26 00000038 4829F9              <1>          sub    rcx, rdi ; длина результата+знак
    27 0000003B 4889C8              <1> 		 mov    rax,rcx
    28 0000003E 48FFC0              <1> 		 inc    rax    ; длина результата+OA
    29 00000041 48FFC6              <1>          inc    rsi    ; пропускаем знак
    30 00000044 56                  <1> 		 push   rsi
    31 00000045 488D343E            <1>          lea    rsi,[rsi+rdi] ; начало результата
    32 00000049 5F                  <1> 		 pop    rdi
    33 0000004A F3A4                <1>          rep movsb
    34 0000004C 5E                  <1>          pop    rsi  
    35 0000004D 59                  <1>          pop    rcx
    36 0000004E 5A                  <1>          pop    rdx
    37 0000004F 5B                  <1>          pop    rbx
    38 00000050 5F                  <1>          pop    rdi
    39 00000051 C3                  <1>          ret
    40                              <1> StrToInt64:
    41 00000052 57                  <1>          push   rdi
    42 00000053 B739                <1>          mov    bh, '9'
    43 00000055 B330                <1>          mov    bl, '0'
    44 00000057 56                  <1>          push   rsi     ; сохран€ем адрес исходной строки
    45 00000058 803E2D              <1>          cmp    byte[rsi], '-'
    46 0000005B 7503                <1>          jne    .prod
    47 0000005D 48FFC6              <1>          inc    rsi     ; пропускаем знак
    48 00000060 FC                  <1> .prod    cld
    49 00000061 6631FF              <1>          xor    di, di  ; обнул€ем будущее число
    50 00000064 AC                  <1> .cycle:  lodsb          ; загружаем символ (цифру)
    51 00000065 3C0A                <1>          cmp    al, 10  ; если 10, то на конец
    52 00000067 741F                <1>          je     .Return
    53 00000069 38D8                <1>          cmp    al, bl  ; сравниваем с кодом нул€
    54 0000006B 722F                <1>          jb     .Error  ; "ниже" Ц ќшибка
    55 0000006D 38F8                <1>          cmp    al, bh  ; сравниваем с кодом дев€ти 
    56 0000006F 772B                <1>          ja     .Error  ; "выше" Ц ќшибка
    57 00000071 2C30                <1>          sub    al, 30h ; получаем цифру из символа
    58 00000073 6698                <1>          cbw            ; расшир€ем до слова
    59 00000075 6650                <1>          push   ax      ; сохран€ем в стеке
    60 00000077 66B80A00            <1>          mov    ax, 10  ; заносим 10 в AX
    61 0000007B 66F7E7              <1>          mul    di      ; умножаем, результат в DX:AX
    62 0000007E 665F                <1>          pop    di      ; в DI Ц очередна€ цифра
    63 00000080 6601F8              <1>          add    ax, di
    64 00000083 6689C7              <1>          mov    di, ax  ; в DI Ц накопленное число        
    65 00000086 EBDC                <1>          jmp    .cycle
    66 00000088 5E                  <1> .Return: pop    rsi
    67 00000089 BB00000000          <1>          mov    rbx, 0
    68 0000008E 803E2D              <1>          cmp    byte[rsi], '-'
    69 00000091 7503                <1>          jne    .J
    70 00000093 66F7DF              <1>          neg    di
    71 00000096 6689F8              <1> .J       mov    ax, di
    72 00000099 98                  <1>          cwde
    73 0000009A EB0B                <1>          jmp    .R
    74 0000009C 5E                  <1> .Error:  pop    rsi
    75 0000009D B800000000          <1>          mov    rax, 0
    76 000000A2 BB01000000          <1>          mov    rbx, 1
    77 000000A7 5F                  <1> .R       pop    rdi
    78 000000A8 C3                  <1>          ret
     2                                  section .data
     3 00000000 010000000200000003-         X dd    1, 2, 3, 4, 5,             6, 7, 8, 9, 10,             11, 12, 13, 14, 15,             16, 17, 18, 19, 20,            21, 22, 23, 24, 25
     3 00000009 000000040000000500-
     3 00000012 000006000000070000-
     3 0000001B 000800000009000000-
     3 00000024 0A0000000B0000000C-
     3 0000002D 0000000D0000000E00-
     3 00000036 00000F000000100000-
     3 0000003F 001100000012000000-
     3 00000048 130000001400000015-
     3 00000051 000000160000001700-
     3 0000005A 000018000000190000-
     3 00000063 00                 
     8                                  
     9                                  section .bss
    10 00000000 <res 14h>                   H resd 5
    11 00000014 ????????                    a resd 1
    12 00000018 ????????                    b resd 1
    13 0000001C ??                          Buf resb 1
    14                                  
    15                                  section .text
    16                                  global _start
    17                                  _start:
    18 000000A9 B905000000                  mov ecx, 5
    19 000000AE BA04000000                  mov edx, 4
    20 000000B3 BB00000000                  mov ebx, 0
    21                                      cycle:
    22 000000B8 52                              push rdx
    23 000000B9 89D8                            mov eax, ebx
    24 000000BB BE04000000                      mov esi, 4
    25 000000C0 F7E6                            mul esi
    26 000000C2 BE05000000                      mov esi, 5
    27 000000C7 F7E6                            mul esi
    28 000000C9 89C6                            mov esi, eax
    29                                  
    30 000000CB 89D8                            mov eax, ebx
    31 000000CD BF04000000                      mov edi, 4
    32 000000D2 F7E7                            mul edi 
    33                                  
    34 000000D4 01F0                            add eax, esi
    35 000000D6 678BA8[00000000]                mov ebp, [X + eax]
    36 000000DD 892C25[14000000]                mov [a], ebp
    37                                  
    38 000000E4 5A                              pop rdx
    39 000000E5 89D0                            mov eax, edx
    40 000000E7 BE04000000                      mov esi, 4
    41 000000EC 52                              push rdx
    42 000000ED F7E6                            mul esi
    43 000000EF BE05000000                      mov esi, 5
    44 000000F4 F7E6                            mul esi
    45 000000F6 89C6                            mov esi, eax
    46                                  
    47 000000F8 89D8                            mov eax, ebx
    48 000000FA BF04000000                      mov edi, 4
    49 000000FF F7E7                            mul edi
    50                                          
    51                                  
    52 00000101 01F0                            add eax, esi
    53 00000103 678BA8[00000000]                mov ebp, [X + eax]
    54 0000010A 892C25[18000000]                mov [b], ebp
    55                                  
    56 00000111 8B0425[14000000]                mov eax, [a]
    57 00000118 8B2C25[18000000]                mov ebp, [b]
    58 0000011F F7E5                            mul ebp
    59 00000121 5A                              pop rdx
    60                                          
    61 00000122 6789049D[00000000]              mov [H + ebx * 4], eax
    62 0000012A FFC3                            inc ebx
    63 0000012C FFCA                            dec edx
    64 0000012E E288                            loop cycle
    65                                  
    66 00000130 BD00000000                  mov ebp, 0
    67 00000135 B905000000                  mov ecx, 5
    68                                      print_cycle:
    69 0000013A 51                              push rcx ;;
    70 0000013B 678B04AD[00000000]              mov eax, [H + ebp * 4]
    71 00000143 BE[1C000000]                    mov esi, Buf
    72 00000148 E8B3FEFFFF                      call IntToStr64
    73                                  
    74 0000014D 89C2                            mov edx, eax
    75 0000014F B801000000                      mov eax, 1
    76 00000154 BF01000000                      mov edi, 1
    77 00000159 BE[1C000000]                    mov esi, Buf
    78 0000015E 0F05                            syscall
    79                                  
    80 00000160 FFC5                            inc ebp
    81 00000162 59                              pop rcx ;;
    82 00000163 E2D5                            loop print_cycle
    83                                      exit:
    84 00000165 B83C000000                      mov rax, 60
    85 0000016A 4831FF                          xor rdi, rdi
    86 0000016D 0F05                            syscall
